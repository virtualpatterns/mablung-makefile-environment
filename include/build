
# --mablung-makefile-environment-include-build-path := $(patsubst %/,%,$(dir $(realpath $(lastword $(MAKEFILE_LIST)))))
# $(info --mablung-makefile-environment-include-build-path := $(--mablung-makefile-environment-include-build-path))

ifeq ($(CURDIR),$(project-path))

ifeq ($(origin mablung-makefile-path),undefined)
export mablung-makefile-path := $(patsubst %/,%,$(dir $(shell npx mablung-makefile get-path)))
endif

include $(mablung-makefile-path)/include/build

else

ifndef filter-environment-release-content
filter-environment-release-content = $(1)
endif

filter-release-content =	$(call $\
														filter-environment-release-content,$\
														$(sort $\
															$(patsubst $\
																$(project-path)/release/esmodule%,$\
																$(project-path)/release/commonjs%,$\
																$(patsubst $\
																	%.js,$\
																	%.cjs,$\
																	$(filter $\
																		$(project-path)/release/esmodule%,$\
																		$(1)))) $\
															$(1)))

ifeq ($(origin mablung-makefile-path),undefined)
export mablung-makefile-path := $(patsubst %/,%,$(dir $(shell npx mablung-makefile get-path)))
endif

include $(mablung-makefile-path)/include/build

# $(info --------------------)
# $(info build-content = $(call trim-project,$(build-content)))
# $(info release-content = $(call trim-project,$(release-content)))
# $(info --------------------)

# this rule replaces the same rule in the included makefile
# $(info -- defining $$(project-path)/release/%.create: in $(call trim-project,$(--mablung-makefile-environment-include-build-path)/build))
# $(info -- $$(project-path)/release/%.create: in $(call trim-project,$(--mablung-makefile-environment-include-build-path)/build))
# @$(shx) echo create .... $(call trim-project,$(patsubst %.create,%,$@))
# $(if $\
# 	$(findstring /release/esmodule,$(patsubst %.create,%,$@)),$\
# 		@$(shx) echo create .... $(call trim-project,$(subst /release/esmodule,/release/commonjs,$(patsubst %.create,%,$@))))
$(project-path)/release/%.create:
	@$(shx) mkdir -p $(patsubst %.create,%,$@)
	$(if $\
		$(findstring /release/esmodule,$(patsubst %.create,%,$@)),$\
			@$(shx) mkdir -p $(subst /release/esmodule,/release/commonjs,$(patsubst %.create,%,$@)))

# # Do not change this rule ... as it is it will replace the same rule in the included makefile
# $(project-path)/release/%.create:
# 	@$(shx) mkdir -p $(patsubst %.create,%,$@)
# 	$(if $\
# 		$(findstring /release/esmodule,$(patsubst %.create,%,$@)),$\
# 		@$(shx) mkdir -p $(subst /release/esmodule,/release/commonjs,$(patsubst %.create,%,$@)),$\
# 		@$(shx) echo -n)

# $(info $$(project-path)/release/%.create: in --mablung-makefile-environment/include/build)
# @$(shx) echo create ... $(patsubst $(project-path)/%,%,$(patsubst %.create,%,$@))
# $(if $\
# 	$(findstring /release/esmodule,$(patsubst %.create,%,$@)),$\
# 	@$(shx) echo create ... $(patsubst $(project-path)/%,%,$(subst /release/esmodule,/release/commonjs,$(patsubst %.create,%,$@))),$\
# 	@$(shx) echo -n)

$(project-path)/release/%.cjs: babel-parameter := --env-name commonjs
$(project-path)/release/%.js: babel-parameter := --env-name esmodule

# @$(shx) echo ignore .... $(call trim-project,$<) for $(call trim-project,$(call trim-folder-path,$@))
$(project-path)/release/commonjs/.DS_Store: $(project-path)/source/esmodule/.DS_Store;
$(project-path)/release/commonjs/%/.DS_Store: $(project-path)/source/esmodule/%/.DS_Store;

$(project-path)/release/commonjs/.babelrc.json: $(project-path)/source/esmodule/.babelrc.json;
$(project-path)/release/commonjs/%/.babelrc.json: $(project-path)/source/esmodule/%/.babelrc.json;

$(project-path)/release/commonjs/.eslintrc.json: $(project-path)/source/esmodule/.eslintrc.json;
$(project-path)/release/commonjs/%/.eslintrc.json: $(project-path)/source/esmodule/%/.eslintrc.json;

$(project-path)/release/commonjs/%.cjs: babel-parameter := --env-name commonjs
$(project-path)/release/commonjs/%.cjs: $(project-path)/source/esmodule/%.js
	@$(shx) echo compile ... $(call trim-project,$<) to $(call trim-project,$@) --source-maps $(or $(source-map),true) $(babel-parameter)
	@$(babel) $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

$(project-path)/release/commonjs/%: $(project-path)/source/esmodule/%
	@$(shx) echo copy ...... $(call trim-project,$<) to $(call trim-project,$(call trim-folder-path,$@))
	@$(shx) cp -R $< $(call trim-folder-path,$@)

ifeq ($(findstring /source/esmodule/,$(CURDIR)),/source/esmodule/)

# this rule is executed after the same rule in the included makefile
# @$(shx) echo copy ...... $(call trim-project,$(CURDIR)) to $(call trim-project,$(call trim-folder-path,$(subst /source/esmodule/,/release/commonjs/,$(CURDIR))))
# @$(shx) echo delete .... $(call trim-project,$(subst /source/esmodule/,/release/commonjs/,$(CURDIR))/makefile)
copy::
	@$(shx) cp -R $(CURDIR) $(call trim-folder-path,$(subst /source/esmodule,/release/commonjs,$(CURDIR)))
	@$(shx) rm -f $(subst /source/esmodule/,/release/commonjs/,$(CURDIR))/makefile

endif

endif
