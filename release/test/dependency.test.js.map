{"version":3,"sources":["../../source/test/dependency.test.js"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,2CAAtB;AACA,OAAO,EAAP,MAAe,SAAf;AACA,OAAO,IAAP,MAAiB,KAAjB;;AAEA,MAAM,OAAO,GAAG,OAAhB;;AAEA,IAAI,CAAC,YAAD,EAAe,OAAO,IAAP,KAAgB;;AAEjC,MAAI,UAAU,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,GAAR,EAAD,CAA5B;;AAEA,EAAA,IAAI,CAAC,IAAL,CAAU,EAAE,CAAC,WAAH,CAAe,UAAU,CAAC,OAA1B,CAAV;AACA,EAAA,IAAI,CAAC,SAAL,CAAe,UAAU,CAAC,MAA1B,EAAkC,EAAlC;;AAED,CAPG,CAAJ;;AASA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA","file":"dependency.test.js","sourcesContent":["import { Check } from '@virtualpatterns/mablung-check-dependency'\nimport Is from '@pwn/is'\nimport Test from 'ava'\n\nconst Process = process\n\nTest('dependency', async (test) => {\n\n  let dependency = await Check(Process.cwd())\n\n  test.true(Is.emptyObject(dependency.missing))\n  test.deepEqual(dependency.unused, [])\n\n})\n\n// import Check from 'depcheck'\n// import Is from '@pwn/is'\n// import Test from 'ava'\n\n// const Process = process\n\n// Test('dependency', async (test) => {\n\n//   let unused = await Check(Process.cwd(), {\n//     'ignoreMatches': [\n//       '@babel/cli',\n//       '@babel/plugin-proposal-export-default-from',\n//       '@babel/plugin-syntax-import-meta',\n//       '@babel/preset-env',\n//       '@virtualpatterns/mablung-babel-plugin-replace-identifier',\n//       '@virtualpatterns/mablung-babel-plugin-replace-string-literal',\n//       '@virtualpatterns/mablung-makefile',\n//       'c8',\n//       'npm-check-updates',\n//       'shx'\n//     ],\n//     'parsers': {\n//       '**/*.cjs': [Check.parser.es6, Check.parser.es7.default],\n//       '**/*.js': [Check.parser.es6, Check.parser.es7.default]\n//     }\n//   })\n\n//   // test.log(unused)\n\n//   test.deepEqual(unused.dependencies, [])\n//   test.deepEqual(unused.devDependencies, [])\n\n//   test.true(Is.emptyObject(unused.invalidDirs))\n//   test.true(Is.emptyObject(unused.invalidFiles))\n//   test.true(Is.emptyObject(unused.missing))\n\n// })\n"]}