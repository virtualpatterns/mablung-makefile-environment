{"version":3,"sources":["../../../source/esmodule/test/index.test.js"],"names":[],"mappings":"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","file":"index.test.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport JSON5 from 'json5'\nimport Path from 'path'\nimport Test from 'ava'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\nconst Process = process\nconst Require = __require\n\nTest('commonjs', async (test) => {\n  test.true(await FileSystem.pathExists(`${FolderPath}/../../commonjs`))\n})\n\nTest('esmodule', async (test) => {\n  test.true(await FileSystem.pathExists(`${FolderPath}/../../esmodule`))\n})\n\nTest('MAKEFILE_PATH', (test) => {\n  test.deepEqual(Process.env['MAKEFILE_PATH'].split(' '), [\n    Require.resolve('../../../makefile'),\n    Require.resolve('../../../include/common') ,\n    Require.resolve('../../../node_modules/@virtualpatterns/mablung-makefile/include/common') ,\n    Require.resolve('../../../include/commit') ,\n    Require.resolve('../../../node_modules/@virtualpatterns/mablung-makefile/include/commit') ,\n    Require.resolve('../../../include/build'),\n    Require.resolve('../../../node_modules/@virtualpatterns/mablung-makefile/include/build'),\n    Require.resolve('../../../include/debug'),\n    Require.resolve('../../../node_modules/@virtualpatterns/mablung-makefile/include/debug')\n  ])\n})\n\nTest('.babelrc.json', async (test) => {\n  test.false(await FileSystem.pathExists(`${FolderPath}/../../.babelrc.json`))\n})\n\nTest('.eslintrc.json', async (test) => {\n  test.false(await FileSystem.pathExists(`${FolderPath}/../../.eslintrc.json`))\n})\n\nTest('../../resource/index.js', async (test) => {\n  test.truthy((await import('../../resource/index.js')).OK)\n})\n\nTest('../../resource/index.json', async (test) => {\n  test.true(JSON5.parse(await FileSystem.readFile(Require.resolve('../../resource/index.json'), { 'encoding': 'utf-8' })).OK)\n})\n\nTest('../../resource/copy/makefile', async (test) => {\n  test.false(await FileSystem.pathExists(`${FolderPath}/../../resource/copy/makefile`))\n})\n\nTest('../../resource/copy/index.json', async (test) => {\n  test.true(JSON5.parse(await FileSystem.readFile(Require.resolve('../../resource/copy/index.json'), { 'encoding': 'utf-8' })).OK)\n})\n\nTest('../../resource/empty', async (test) => {\n  test.true(await FileSystem.pathExists(`${FolderPath}/../../resource/empty`))\n})\n\nTest('../../resource/ignore', async (test) => {\n  test.false(await FileSystem.pathExists(`${FolderPath}/../../resource/ignore`))\n})\n\nTest('./resource/index.js', async (test) => {\n  test.truthy((await import('./resource/index.js')).OK)\n})\n\nTest('./resource/index.json', async (test) => {\n  test.true(JSON5.parse(await FileSystem.readFile(Require.resolve('./resource/index.json'), { 'encoding': 'utf-8' })).OK)\n})\n\nTest('./resource/copy/makefile', async (test) => {\n  test.false(await FileSystem.pathExists(`${FolderPath}/resource/copy/makefile`))\n})\n\nTest('./resource/copy/index.json', async (test) => {\n  test.true(JSON5.parse(await FileSystem.readFile(Require.resolve('./resource/copy/index.json'), { 'encoding': 'utf-8' })).OK)\n})\n\nTest('./resource/ignore', async (test) => {\n  test.false(await FileSystem.pathExists(`${FolderPath}/resource/ignore`))\n})\n"]}